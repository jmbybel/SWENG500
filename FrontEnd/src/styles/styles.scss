/* Variables */
$blue: #5bb7db;

/* Styles */
body {
  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
  color: #4d4d4d;
  min-width: 400px;
  max-width: 1000px;
  margin: 0 auto;
  -webkit-font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  font-smoothing: antialiased;
  font-weight: 300;
}

h2 {
	color: $blue;
}

#sensorsPageTabs {
  display: inline-block;
  width: 49%;
  vertical-align: top;
  margin-left: 10px;
}

.newSensorForm {
  display: inline-block;
  padding: 20px;
  width: 100%;

  .input {
    display: block;
    margin-bottom: 30px;

    .labelSpan {
      display: inline-block;
      margin-right: 20px;
      min-width: 40%;
    }

    input {
      min-width: 50%;
      font-size: 85%;
    }
  }
  .saveButton {
    width: 100%;
  }
}

.sensorListDiv {
  display: inline-block;
  vertical-align: top;
  width: 49%;
  height: 747px;

  .sensorList {
    height: auto;
    max-height: 610px;
    div {
      margin-bottom: 5px;
    }
  }
}

.activeSensorCount {
  width: 39%;
  display: inline-block;
  vertical-align: top;
}

.destinationIPDiv {
  display: inline-block;
  margin-left: 10px;
  vertical-align: bottom;
  margin-bottom: 24px;
  height: 100%;
  text-align: right;

  input {
    margin-left: 10px;
    width: 370px;
  }
}

.destinationIPSaveButton {
  width: 100px;
  margin-left: 10px;
}

.liveDataFeed {
  overflow: hidden;
}

.filterDiv {
  display: inline-block;
  width: 897px;
  margin-bottom: 10px;
}

.filterSelection {
  margin-left: 9px;
}

.newSensorButton {
  display: inline-block;
}

#randomIntervalDropdown, #sensorTypeDropdown {
  width: 100px;
  text-align: left;
}

.wrap {
  white-space: normal !important;
  // These are technically the same, but use both.
  overflow-wrap: break-word !important;
  word-wrap: break-word !important;
  -ms-word-break: break-all !important;
  // This is the dangerous one in WebKit, as it breaks things wherever.
  word-break: break-all !important;
  // Instead use this non-standard one.
  word-break: break-word !important;
  // Adds a hyphen where the word breaks, if supported (No Blink).
  -ms-hyphens: auto !important;
  -moz-hyphens: auto !important;
  -webkit-hyphens: auto !important;
  hyphens: auto !important;
}

.liveTabFeed, .liveDataFeed {
  .liveTabFeedTable {
    .react-bs-container-body {
      overflow-y: auto;
    }
    td:first-of-type {
      white-space: normal !important;
      // These are technically the same, but use both.
      overflow-wrap: break-word !important;
      word-wrap: break-word !important;
      -ms-word-break: break-all !important;
      // This is the dangerous one in WebKit, as it breaks things wherever.
      word-break: break-all !important;
      // Instead use this non-standard one.
      word-break: break-word !important;
      // Adds a hyphen where the word breaks, if supported (No Blink).
      -ms-hyphens: auto !important;
      -moz-hyphens: auto !important;
      -webkit-hyphens: auto !important;
      hyphens: auto !important;
    }
  }
  .liveDataFeedTable {
    td:first-of-type {
      white-space: normal !important;
      // These are technically the same, but use both.
      overflow-wrap: break-word !important;
      word-wrap: break-word !important;
      -ms-word-break: break-all !important;
      // This is the dangerous one in WebKit, as it breaks things wherever.
      word-break: break-all !important;
      // Instead use this non-standard one.
      word-break: break-word !important;
      // Adds a hyphen where the word breaks, if supported (No Blink).
      -ms-hyphens: auto !important;
      -moz-hyphens: auto !important;
      -webkit-hyphens: auto !important;
      hyphens: auto !important;
    }
  }
}
